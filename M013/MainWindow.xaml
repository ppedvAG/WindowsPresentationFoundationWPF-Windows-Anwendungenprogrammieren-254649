<Window x:Class="M013.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:M013"
        Title="MainWindow" Height="450" Width="800"
		WindowStartupLocation="CenterScreen"
		Topmost="True"
		DataContext="{Binding RelativeSource={RelativeSource Self}}">
    <StackPanel>
		<!--Commands-->
		<!--Methodenzeiger, welche per Binding in das Frontend eingebunden werden-->
		<!--Problem bei MVVM: Die Backendklasse muss Standard bleiben; Events nicht möglich-->
		<!--Lösung: Command-Property (wo möglich), EventTrigger (EventToCommand)-->
		
		<!--Beispiel: Button-->
		<Button Content="Hallo Welt"
				Command="{Binding Exit}"/>

		<!--Beispiel: Zähler erhöhen-->
		<Button Content="Zähler++"
				Command="{Binding Counter}"
				CommandParameter="{Binding Zaehler}"/>
		
		<!--Problem: Jedes Click-Event im Code benötigt eine eigene Command-Klasse-->
		<!--Lösung: CustomCommand, welches den Code (Execute, CanExecute) per Parameter im Konstruktor empfängt (Methodenzeiger)-->
		<Button Content="Hallo"
				Command="{Binding CounterCustom}"/>
		
		<!--Behaviour Trigger-->
		<!--An beliebige Events ein Command anhängen-->
		<TextBox Text="{Binding Eingabe, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
			<b:Interaction.Triggers>
				<b:EventTrigger EventName="KeyDown">
					<b:InvokeCommandAction Command="{Binding EingabeCommand}"
										   PassEventArgsToCommand="True"/>
				</b:EventTrigger>
			</b:Interaction.Triggers>
		</TextBox>
	</StackPanel>
</Window>
